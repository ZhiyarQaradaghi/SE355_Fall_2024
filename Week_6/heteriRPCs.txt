Two ways to implement RPCS 
1. Socket API
2. RMI 

- both sides must be implemented in Java -

Our goal is to circumvent this limitation 

p1 Java -------- p2 C#

Similarity:
- both know how to deal with TCP/IP
- both will have local state

Issue:
- How data is represented from one end to the other / When sending a data from one language to another 
- the key problem is the serialization and deserliazation as they each do it in a different manner / the data will be changed during serialization 
- Different ***platformsCPU: architecture could be different, OS could be different

- A big change in the last 15 years is the mobile phone 
- A mobile phone and the server have completely different languages and platforms- cpu architecture(***little endyann, big endyann), OS


Heterogeneous - Data should be sent from one end to another without having its semantics or anything about it changed 


We need to *standardize the serialization process 

Called - Marshaling and Unmarshaling 

Marshaling requirement: 
- should be language independant 
- platform independant

Do not care about platform nor language

First way: Implement the protocol for each language - time consuming 

Difference between seriliazation and marshaling: Serialization is a subset of Marshaling - marshaling also includes changing the process in a way so that it is language and platform independant 

Use a well known standard instead:

Text-based protocols - 
1. JSON - convert/format data to text/string -> send as binary 
2. XML - convert to string html -> send as binary 


Browser C++ ------------> Moodle php 

Binary-baed protocols - data is converted to binary directly rather than formatting to string
1. Google buffering 


Pros and Cons: 

[Text based] 
+ readibility 
+ debugging 
+ easy to setup / simple 
- Slow 
- not compact: 123 - 3 bytes - a set of characters

[Binary Based]
+ fast
+ compactness : 123 = 1 byte
- unreadible
- hard debugging 
- complex - need a complex setup 
---------


Make a setup 

Goal: 
client java -----------> server c#, c, java 


Google Protobuf
1. Create a .proto file - defines the type of messages that you will send from one end to another 
2. Give this file as an input tothe protoc compiler 
3. Which language do you want - this will convert to other source files .java, .py, .c ...
4. From that they will able to marshal and unmarshal 


-- to run the protoc file generated by the protoc compiler we need the java library if you want manually 
-- or use maven llk